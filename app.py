import streamlit as st
import pandas as pd
import numpy as np
import os
import html
from datetime import datetime

from src.data_loader import load_all_data
from src.analysis import get_top_deals, calculate_price_statistics
from src.plotting import create_price_mileage_scatter_plot, create_price_distribution_box_plot
from src.econometrics import create_quantile_lowess_plot, run_hedonic_model

# --- Page Configuration ---
st.set_page_config(
    page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ",
    page_icon="üìä",
    layout="wide"
)

# --- Data Loading ---
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
force_reload = st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤")
df = load_all_data(force_reload=force_reload)

if df is None:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–∞–ø–∫–µ `data/raw/`.")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: `python3 src/scrape_polovni_botasaurus.py`")
    st.stop()

# --- Sidebar Filters ---
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

all_sources = sorted(df['source'].unique())
selected_sources = st.sidebar.multiselect("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", all_sources, default=all_sources)

all_groups = sorted(df['search_group'].unique())
selected_groups = st.sidebar.multiselect("–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", all_groups, default=all_groups)

min_year, max_year = int(df['year'].min()), int(df['year'].max())
selected_year_range = st.sidebar.slider("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", min_year, max_year, (min_year, max_year))

min_km, max_km = int(df['mileage_km'].min()), int(df['mileage_km'].max())
selected_km_range = st.sidebar.slider("–ü—Ä–æ–±–µ–≥, –∫–º", min_km, max_km, (min_km, max_km))

# --- Filtering ---
filtered_df = df[
    (df['source'].isin(selected_sources)) &
    (df['search_group'].isin(selected_groups)) &
    (df['year'].between(selected_year_range[0], selected_year_range[1])) &
    (df['mileage_km'].between(selected_km_range[0], selected_km_range[1]))
].copy()

# --- Main Page Calculations ---
fig = create_price_mileage_scatter_plot(filtered_df)
top_deals_df = get_top_deals(filtered_df)

# --- Render Main Page ---
st.title("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
st.write(f"–ù–∞–π–¥–µ–Ω–æ **{len(filtered_df)}** –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

if filtered_df.empty:
    st.warning("–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
else:
    st.header("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
    js_code = '<script>var plot_div = document.getElementsByClassName(\"plotly-graph-div\")[0]; plot_div.on(\"plotly_click\", function(data){if(data.points.length > 0){var point = data.points[0]; var url = point.customdata[0]; if(url){window.open(url, \"_blank\");}}});</script>'
    graph_html = fig.to_html(include_plotlyjs='cdn')
    graph_html = graph_html.replace('</body>', js_code + '</body>')
    st.components.v1.html(graph_html, height=700, scrolling=True)

    if not filtered_df.empty:
        source_counts = filtered_df['source'].value_counts().to_dict()
        summary_parts = [f"**{source}**: {count}" for source, count in source_counts.items()]
        st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: " + ", ".join(summary_parts))

    st.header("‚≠ê –¢–æ–ø-2 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–±–µ–≥–∞")
    st.write("–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω –≤ –∫–∞–∂–¥–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—Ä–æ–±–µ–≥–∞.")
    # Make the table height dynamic: cap at 1150px, shrink when rows are fewer
    try:
        _rows = int(len(top_deals_df))
    except Exception:
        _rows = 0
    _ROW_PX = 34   # approx row height in Streamlit dataframe
    _HDR_PX = 38   # approx header height
    _PAD_PX = 16   # small padding
    _MAX_PX = 1150
    deals_table_height = min(_MAX_PX, _HDR_PX + _ROW_PX * max(_rows, 1) + _PAD_PX)
    st.dataframe(top_deals_df, use_container_width=True, height=int(deals_table_height), column_config={
        "url": st.column_config.LinkColumn("–°—Å—ã–ª–∫–∞", display_text="–ü–µ—Ä–µ–π—Ç–∏ ‚Üó"),
        "comparison_group": st.column_config.Column("–ì—Ä—É–ø–ø–∞"),
        "mileage_bin": st.column_config.Column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–µ–≥–∞"),
        "source": st.column_config.Column("–ò—Å—Ç–æ—á–Ω–∏–∫")
    })

    st.header("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω–æ–≤—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.")

    available_search_groups = sorted(filtered_df['search_group'].unique())
    if available_search_groups:
        selected_model_for_comparison = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            available_search_groups
        )

        model_comparison_df = filtered_df[
            filtered_df['search_group'] == selected_model_for_comparison
        ].copy()

        if not model_comparison_df.empty:
            st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –¥–ª—è {selected_model_for_comparison}")

            price_stats = calculate_price_statistics(model_comparison_df)
            st.dataframe(price_stats.style.format({
                'mean': "‚Ç¨{:,.0f}",
                'median': "‚Ç¨{:,.0f}",
                'std': "‚Ç¨{:,.0f}",
                '25th_percentile': "‚Ç¨{:,.0f}",
                '75th_percentile': "‚Ç¨{:,.0f}"
            }))

            if len(price_stats) > 1:
                medians = price_stats['median'].to_dict()
                sources = list(medians.keys())
                
                if len(sources) == 2:
                    source1, source2 = sources[0], sources[1]
                    median1, median2 = medians[source1], medians[source2]

                    if median1 > 0 and median2 > 0:
                        percentage_diff = ((median2 - median1) / median1) * 100
                        st.write(f"**–†–∞–∑–Ω–∏—Ü–∞ –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω ({source2} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {source1}):** {percentage_diff:,.2f}%")
                        if percentage_diff > 0:
                            st.info(f"–ù–∞ —Å–∞–π—Ç–µ {source2} –º–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ {selected_model_for_comparison} –≤—ã—à–µ –Ω–∞ {percentage_diff:,.2f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å {source1}.")
                        elif percentage_diff < 0:
                            st.info(f"–ù–∞ —Å–∞–π—Ç–µ {source2} –º–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ {selected_model_for_comparison} –Ω–∏–∂–µ –Ω–∞ {abs(percentage_diff):,.2f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å {source1}.")
                        else:
                            st.info(f"–ú–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ {selected_model_for_comparison} –Ω–∞ –æ–±–æ–∏—Ö —Å–∞–π—Ç–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã.")
                    else:
                        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–¥–∏–∞–Ω.")
                else:
                    st.warning("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–¥–∏–∞–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

            st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {selected_model_for_comparison}")
            fig_box = create_price_distribution_box_plot(model_comparison_df)
            st.plotly_chart(fig_box, use_container_width=True)

            st.header("üî¨ –≠–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            st.write("–≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–∏–ª—å–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ –∏ LOWESS —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.")
            econometrics_fig = create_quantile_lowess_plot(model_comparison_df)
            econometrics_html = econometrics_fig.to_html(include_plotlyjs='cdn')
            # Reuse the js_code defined for the first graph to make points clickable
            econometrics_html = econometrics_html.replace('</body>', js_code + '</body>')
            st.components.v1.html(econometrics_html, height=700, scrolling=True)

            st.subheader("–ì–µ–¥–æ–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏")
            hedonic_model = run_hedonic_model(model_comparison_df)
            if hedonic_model:
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç '—á–∏—Å—Ç—É—é' —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–∞—Ö –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è –ø—Ä–æ–±–µ–≥ –∏ –≤–æ–∑—Ä–∞—Å—Ç.")
                
                market_coeffs = {k: v for k, v in hedonic_model.params.items() if k.startswith('market_')}
                if market_coeffs:
                    # Also show the reference market
                    if hasattr(hedonic_model, 'reference_market'):
                        st.write(f"*(–ë–∞–∑–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: **{hedonic_model.reference_market}**)*")

                    for market_var, coeff in market_coeffs.items():
                        # Extract market name from 'market_polovni_automobili'
                        market_name = market_var.replace('market_', '')
                        premium = (np.exp(coeff) - 1) * 100
                        st.metric(label=f"–ü—Ä–µ–º–∏—è —Ä—ã–Ω–∫–∞ {market_name}", value=f"{premium:.2f}%" )
                
                st.write("–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏:")
                # --- Manual HTML Table Generation with Tooltips (v2) ---

                # --- Manual HTML Table Generation with Tooltips (v3) ---

                # Define tooltips for regression summary terms
                tooltips = {
                    "R-squared": "–ß—Ç–æ —ç—Ç–æ: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –º–æ–¥–µ–ª—å. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ß–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ. –ó–Ω–∞—á–µ–Ω–∏–µ 0.83 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ 83% —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è –º–æ–¥–µ–ª—å—é, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –µ–µ –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.",
                    "Adj. R-squared": "–ß—Ç–æ —ç—Ç–æ: R-–∫–≤–∞–¥—Ä–∞—Ç, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏. –û–±—ã—á–Ω–æ –æ–Ω —á—É—Ç—å –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–≥–æ R-–∫–≤–∞–¥—Ä–∞—Ç–∞.",
                    "No. Observations": "–ß—Ç–æ —ç—Ç–æ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–Ω–∞–±–ª—é–¥–µ–Ω–∏–π), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.",
                    "Df Residuals": "–ß—Ç–æ —ç—Ç–æ: –°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –æ—Å—Ç–∞—Ç–∫–æ–≤ (–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –º–∏–Ω—É—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤). –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.",
                    "Df Model": "–ß—Ç–æ —ç—Ç–æ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏ (–Ω–µ —Å—á–∏—Ç–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É).",
                    "Covariance Type": "–ß—Ç–æ —ç—Ç–æ: –¢–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.",
                    "F-statistic": "–ß—Ç–æ —ç—Ç–æ: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—â–µ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ.",
                    "Prob (F-statistic)": "–ß—Ç–æ —ç—Ç–æ: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ < 0.05, –º–æ–¥–µ–ª—å –≤ —Ü–µ–ª–æ–º —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π, –∏ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å.",
                    "Log-Likelihood": "–ß—Ç–æ —ç—Ç–æ: –õ–æ–≥–∞—Ä–∏—Ñ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.",
                    "AIC": "–ß—Ç–æ —ç—Ç–æ: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –ê–∫–∞–∏–∫–µ. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –º–µ–∂–¥—É —Å–æ–±–æ–π (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ).",
                    "BIC": "–ß—Ç–æ —ç—Ç–æ: –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π. –ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω AIC, –Ω–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–π '—à—Ç—Ä–∞—Ñ' –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤.",
                    "Intercept": "–ß—Ç–æ —ç—Ç–æ: –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ —Ü–µ–Ω—ã, –∫–æ–≥–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∞–≤–Ω—ã –Ω—É–ª—é. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –û–±—ã—á–Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–º—ã—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –Ω—É–ª–µ–≤—ã–º –ø—Ä–æ–±–µ–≥–æ–º.",
                    "age": "–ß—Ç–æ —ç—Ç–æ: –§–∞–∫—Ç–æ—Ä '–≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è'. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ª–æ–≥–∞—Ä–∏—Ñ–º —Ü–µ–Ω—ã —Å –∫–∞–∂–¥—ã–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≥–æ–¥–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞.",
                    "mileage_km": "–ß—Ç–æ —ç—Ç–æ: –§–∞–∫—Ç–æ—Ä '–ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ª–æ–≥–∞—Ä–∏—Ñ–º —Ü–µ–Ω—ã —Å –∫–∞–∂–¥—ã–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–∏–ª–æ–º–µ—Ç—Ä–æ–º –ø—Ä–æ–±–µ–≥–∞.",
                    "I(mileage_km ** 2)": "–ß—Ç–æ —ç—Ç–æ: –ö–≤–∞–¥—Ä–∞—Ç –ø—Ä–æ–±–µ–≥–∞. –≠—Ç–æ—Ç —á–ª–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—É –±—ã—Ç—å –∫—Ä–∏–≤–æ–π, –∞ –Ω–µ –ø—Ä—è–º–æ–π. –ß–∞—Å—Ç–æ —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–±–µ–≥–∞ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö - —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–º–æ–≥–∞–µ—Ç —É–ª–æ–≤–∏—Ç—å —Ç–∞–∫–æ–π –∏–∑–≥–∏–±.",
                    "market_polovni_automobili": "–ß—Ç–æ —ç—Ç–æ: –§–∞–∫—Ç–æ—Ä '—Ä—ã–Ω–æ–∫'. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ª–æ–≥–∞—Ä–∏—Ñ–º —Ü–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º —Ä—ã–Ω–∫–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø—Ä–æ–±–µ–≥–∞.",
                    "coef": "–ß—Ç–æ —ç—Ç–æ: –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∞. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —É–º–µ–Ω—å—à–∞–µ—Ç —Ü–µ–Ω—É, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç.",
                    "std err": "–ß—Ç–æ —ç—Ç–æ: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–µ–ª–∏–∫–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º, –∫ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—é —Å—Ç–æ–∏—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.",
                    "t": "–ß—Ç–æ —ç—Ç–æ: t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫ –µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—à–∏–±–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ p-–∑–Ω–∞—á–µ–Ω–∏—è.",
                    "P>|t|": "–ß—Ç–æ —ç—Ç–æ: p-–∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ï—Å–ª–∏ < 0.05, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ, –∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é.",
                    "[0.025": "–ß—Ç–æ —ç—Ç–æ: –ù–∞—á–∞–ª–æ 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 95% –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.",
                    "0.975]": "–ß—Ç–æ —ç—Ç–æ: –ö–æ–Ω–µ—Ü 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 95% –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.",
                    "Omnibus": "–ß—Ç–æ —ç—Ç–æ: –¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–æ–¥–µ–ª–∏. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.",
                    "Prob(Omnibus)": "–ß—Ç–æ —ç—Ç–æ: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å Omnibus —Ç–µ—Å—Ç–∞. –ó–Ω–∞—á–µ–Ω–∏–µ > 0.05 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤.",
                    "Skew": "–ß—Ç–æ —ç—Ç–æ: –ê—Å–∏–º–º–µ—Ç—Ä–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤. 0 - –∏–¥–µ–∞–ª—å–Ω–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è.",
                    "Kurtosis": "–ß—Ç–æ —ç—Ç–æ: –≠–∫—Å—Ü–µ—Å—Å (–æ—Å—Ç—Ä–æ—Ç–∞ –ø–∏–∫–∞) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤. 3 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.",
                    "Durbin-Watson": "–ß—Ç–æ —ç—Ç–æ: –¢–µ—Å—Ç –Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü–æ–º–æ–≥–∞–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏. –ó–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1.5 –¥–æ 2.5 –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–∏–µ–º–ª–µ–º—ã–º–∏.",
                    "Jarque-Bera (JB)": "–ß—Ç–æ —ç—Ç–æ: –î—Ä—É–≥–æ–π —Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤.",
                    "Prob(JB)": "–ß—Ç–æ —ç—Ç–æ: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ Jarque-Bera.",
                    "Cond. No.": "–ß—Ç–æ —ç—Ç–æ: –ß–∏—Å–ª–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ –∏–∑-–∑–∞ —Å–≤—è–∑–∏ '–ø—Ä–æ–±–µ–≥–∞' –∏ '–ø—Ä–æ–±–µ–≥–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ' –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π."
                }

                def get_tooltip(term, tooltips_dict):
                    term = term.strip().replace(":", "")  # Clean the term
                    tooltip_text = ""

                    # Specific match for I(mileage_km ** 2)
                    if term == "I(mileage_km ** 2)":
                        tooltip_text = tooltips_dict.get("I(mileage_km ** 2)", "")
                    # Simple direct match
                    elif term in tooltips_dict:
                        tooltip_text = tooltips_dict[term]
                    # Partial match for market variables
                    elif term.startswith("market_"):
                        tooltip_text = tooltips_dict["market_"]
                    # Partial match for confidence interval
                    elif term.startswith("[0.025"):
                        tooltip_text = tooltips_dict["[0.025"]
                    elif term.endswith("0.975]"):
                        tooltip_text = tooltips_dict["0.975]"]
                    
                    if tooltip_text:
                        # Escape the text for safe HTML embedding, especially for quotes in tooltips
                        return html.escape(tooltip_text, quote=True)
                    
                    return ""  # No tooltip

                summary = hedonic_model.summary()
                html_output = ""

                # --- Table 1 ---
                html_output += "<h4>–¢–∞–±–ª–∏—Ü–∞ 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h4>"
                table1_data = summary.tables[0].data
                html_output += "<table class='statsmodels-table'>"
                for row in table1_data:
                    html_output += "<tr>"
                    if len(row) >= 4:
                        html_output += f"<td class='header' title='{get_tooltip(row[0], tooltips)}'>{row[0]}</td><td>{row[1]}</td>"
                        html_output += f"<td class='header' title='{get_tooltip(row[2], tooltips)}'>{row[2]}</td><td>{row[3]}</td>"
                    html_output += "</tr>"
                html_output += "</table><br>"

                # --- Table 2 ---
                html_output += "<h4>–¢–∞–±–ª–∏—Ü–∞ 2: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏</h4>"
                table2_data = summary.tables[1].data
                html_output += "<table class='statsmodels-table'>"
                # Header row
                html_output += "<thead><tr>"
                for header_cell in table2_data[0]:
                    html_output += f"<th title='{get_tooltip(header_cell, tooltips)}'>{header_cell}</th>"
                html_output += "</tr></thead>"
                # Data rows
                html_output += "<tbody>"
                for row in table2_data[1:]:
                    html_output += "<tr>"
                    # First cell is the variable name (header style)
                    html_output += f"<td class='header' title='{get_tooltip(row[0], tooltips)}'>{row[0]}</td>"
                    # Other cells are numeric data
                    for cell in row[1:]:
                        html_output += f"<td>{cell}</td>"
                    html_output += "</tr>"
                html_output += "</tbody></table><br>"

                # --- Table 3 ---
                html_output += "<h4>–¢–∞–±–ª–∏—Ü–∞ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã</h4>"
                table3_data = summary.tables[2].data
                html_output += "<table class='statsmodels-table'>"
                for row in table3_data:
                    html_output += "<tr>"
                    if len(row) >= 4:
                        html_output += f"<td class='header' title='{get_tooltip(row[0], tooltips)}'>{row[0]}</td><td>{row[1]}</td>"
                        html_output += f"<td class='header' title='{get_tooltip(row[2], tooltips)}'>{row[2]}</td><td>{row[3]}</td>"
                    html_output += "</tr>"
                html_output += "</table>"

                # --- Render final HTML ---
                st.markdown(f"""
                <style>
                    .statsmodels-summary table.statsmodels-table {{
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        border-collapse: collapse;
                        width: 100%;
                        color: #FAFAFA;
                        background-color: #0E1117;
                    }}
                    .statsmodels-summary th, .statsmodels-summary td {{
                        text-align: right;
                        border: 1px solid #262730;
                        padding: 8px;
                        font-size: 0.9rem;
                    }}
                    .statsmodels-summary .header, .statsmodels-summary th {{
                        text-align: left;
                        font-weight: bold;
                    }}
                    .statsmodels-summary h4 {{
                        margin-top: 20px;
                        margin-bottom: 10px;
                        font-weight: bold;
                        color: #FAFAFA;
                    }}
                    .statsmodels-summary td[title]:hover {{
                        cursor: help;
                        background-color: #262730;
                    }}
                </style>
                <div class="statsmodels-summary">
                    {html_output}
                </div>
                """, unsafe_allow_html=True)

                # Display notes, if any
                if len(summary.tables) > 3:
                    st.subheader("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
                    notes = summary.tables[3].data
                    st.text('\n'.join([row[0] for row in notes]))

                st.subheader("–ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º–æ–¥–µ–ª–∏")

                with st.expander("–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (R-squared –∏ –¥—Ä.)"):
                    st.markdown("""
                    –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å –≤ —Ü–µ–ª–æ–º –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.

                    - **`R-squared` (R-–∫–≤–∞–¥—Ä–∞—Ç)**: **–°–∞–º—ã–π –≤–∞–∂–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–µ—Å—å.** –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –≤–∞—à–∞ –º–æ–¥–µ–ª—å —Å–º–æ–≥–ª–∞ –æ–±—ä—è—Å–Ω–∏—Ç—å. –ó–Ω–∞—á–µ–Ω–∏–µ `0.831` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ **83.1%** –≤—Å–µ—Ö —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∫–ª—é—á–∏–ª–∏ –≤ –º–æ–¥–µ–ª—å (–ø—Ä–æ–±–µ–≥, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ä—ã–Ω–æ–∫). **–≠—Ç–æ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –∏ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.**

                    - **`No. Observations` (–ö–æ–ª-–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ë–æ–ª—å—à–µ ‚Äî –ª—É—á—à–µ.

                    - **`Prob (F-statistic)` (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)**: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "–ê –∏–º–µ–µ—Ç –ª–∏ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –≤–æ–æ–±—â–µ —Å–º—ã—Å–ª?". –ï—Å–ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.00`), —Ç–æ –æ—Ç–≤–µ—Ç ‚Äî **"–¥–∞, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∏–º–µ–µ—Ç"**.

                    **–í—ã–≤–æ–¥:** –≠—Ç–∏ —Ü–∏—Ñ—Ä—ã –¥–∞—é—Ç –≤–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –≤—ã–≤–æ–¥–∞–º –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å.
                    """)

                with st.expander("–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)"):
                    st.markdown("""
                    –≠—Ç–æ "—Å–µ—Ä–¥—Ü–µ" –∞–Ω–∞–ª–∏–∑–∞. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ü–µ–Ω—É.

                    - **`coef` (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)**: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç "—Å–∏–ª—É" –∏ "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º —Ü–µ–Ω—ã.
                        - **`age` (–í–æ–∑—Ä–∞—Å—Ç)**: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `-0.06`) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–¥ **—É–º–µ–Ω—å—à–∞–µ—Ç** —Ü–µ–Ω—É –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 6%.
                        - **`market_...`**: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `0.105`) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –∏ –ø—Ä–æ–±–µ–≥–µ, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ —ç—Ç–æ–º —Ä—ã–Ω–∫–µ –≤ —Å—Ä–µ–¥–Ω–µ–º **–¥–æ—Ä–æ–∂–µ** –±–∞–∑–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 10.5%.

                    - **`P>|t|` (p-–∑–Ω–∞—á–µ–Ω–∏–µ)**: **–ö–ª—é—á–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü.** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–º –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å.
                        - **–ü—Ä–∞–≤–∏–ª–æ –ø—Ä–æ—Å—Ç–æ–µ:** –µ—Å–ª–∏ p-–∑–Ω–∞—á–µ–Ω–∏–µ **–º–µ–Ω—å—à–µ 0.05**, —Ç–æ –≤–ª–∏—è–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ –∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ. –£ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ p-–∑–Ω–∞—á–µ–Ω–∏–µ `0.000`, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏—Ö —Å–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.

                    **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
                    1. –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ: "–ö–∞–∂–¥—ã–π –≥–æ–¥ —Å—Ç–∞—Ä–µ–Ω–∏—è –æ—Ç–Ω–∏–º–∞–µ—Ç ~6% —Ü–µ–Ω—ã".
                    2. –í—ã –¥–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏ ‚Äî —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å.
                    """)

                with st.expander("–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"):
                    st.markdown("""
                    –≠—Ç–∞ —á–∞—Å—Ç—å –±–æ–ª—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–≤, –Ω–æ –≤–æ—Ç –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:

                    - **`Durbin-Watson`**: –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–æ–¥–µ–ª–∏. –ó–Ω–∞—á–µ–Ω–∏–µ –æ–∫–æ–ª–æ 2 (—É –≤–∞—Å ~1.8) —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º.

                    - **`Cond. No.` (–ß–∏—Å–ª–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏)**: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—Ç –ª–∏ –≤ –º–æ–¥–µ–ª–∏ "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö" —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ–ª–∏–∫–æ, –∏ –º–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
                        - **–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?** –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, —Ç–∞–∫ –∫–∞–∫ `–ø—Ä–æ–±–µ–≥` –∏ `–ø—Ä–æ–±–µ–≥ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ` —Å–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω—ã. –î–ª—è –≤–∞—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ —ç—Ç–æ **–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π**.

                    **–í—ã–≤–æ–¥:** –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ —Ü–µ–ª–æ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –∏ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ `Cond. No.` –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.
                    """)

                with st.expander("–ö–∞–∫ —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫? (–¢—Ä–µ–Ω–¥—ã –∏ –∫–æ—Ä–∏–¥–æ—Ä—ã)"):
                    st.markdown("""
                    –ì—Ä–∞—Ñ–∏–∫ –≤—ã—à–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ª–æ—è–º–∏.

                    - **–¶–≤–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏**: –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä—ã–Ω–∫–æ–≤ (`mobile.de` –∏–ª–∏ `polovni_automobili`).

                    - **–¶–≤–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ (–¢—Ä–µ–Ω–¥—ã)**: –≠—Ç–æ "—Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ" —Å—Ä–µ–¥–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ü–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—ã–Ω–∫–∞. –û–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—â—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é: –∫–∞–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–∞–¥–∞–µ—Ç —Ü–µ–Ω–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–≥–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ.

                    - **–ü—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ (–¶–µ–Ω–æ–≤—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã)**: –û–Ω–∏ –¥–µ–ª—è—Ç –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–∞ —Ü–µ–Ω–æ–≤—ã–µ —Å–ª–æ–∏:
                        - **–ö–æ—Ä–∏–¥–æ—Ä "25% / 75%" (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)**: –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è "—è–¥—Ä–æ" —Ä—ã–Ω–∫–∞ ‚Äî 50% –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏, —Å–∞–º—ã–º–∏ —Ç–∏–ø–∏—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏.
                        - **–ö–æ—Ä–∏–¥–æ—Ä "10% / 90%" (–≤–Ω–µ—à–Ω–∏–π)**:
                            - –ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ª–∏–Ω–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è **10% —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö** –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–∑–æ–Ω–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫).
                            - –í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ª–∏–Ω–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è **10% —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö** –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

                    **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?**
                    –û—Ü–µ–Ω–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –∫–æ—Ä–∏–¥–æ—Ä –ø–æ–ø–∞–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ï—Å–ª–∏ –æ–Ω –Ω–∏–∂–µ –ª–∏–Ω–∏–∏ 10%, —ç—Ç–æ –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –æ–Ω –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∏–¥–æ—Ä–∞ 25-75%, –µ–≥–æ —Ü–µ–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–π".
                    """)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–µ–¥–æ–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏.")

        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    else:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# --- Sidebar Export Button (MOVED TO THE END OF THE SCRIPT) ---
st.sidebar.divider()
st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç")
if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ HTML"):
    if not filtered_df.empty:
        # --- Part 1: Scatter Plot ---
        graph_html = fig.to_html(include_plotlyjs='cdn')
        js_code = '<script>var plot_div = document.getElementsByClassName(\"plotly-graph-div\")[0]; plot_div.on(\"plotly_click\", function(data){if(data.points.length > 0){var point = data.points[0]; var url = point.customdata[0]; if(url){window.open(url, \"_blank\");}}});</script>'
        graph_html = graph_html.replace('</body>', js_code + '</body>')

        # --- Listings Summary for HTML ---
        if not filtered_df.empty:
            source_counts = filtered_df['source'].value_counts().to_dict()
            summary_parts_html = [f"<strong>{source}</strong>: {count}" for source, count in source_counts.items()]
            listings_summary_html = f'<p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</strong> {", ".join(summary_parts_html)}</p>'
        else:
            listings_summary_html = ""

        # --- Part 2: Top Deals Table ---
        deals_for_html = top_deals_df.copy()
        deals_for_html.index = np.arange(1, len(deals_for_html) + 1)
        deals_for_html.index.name = "‚Ññ"
        deals_for_html['url'] = deals_for_html['url'].apply(lambda x: f'<a href="{x}" target="_blank">–ü–µ—Ä–µ–π—Ç–∏</a>')
        table_html = deals_for_html.to_html(index=True, justify='left', border=0, classes='deals_table', escape=False, table_id="deals-table")

        # --- Part 3: Detailed Comparison (Robust version) ---
        comparison_html_parts = []
        if available_search_groups:
            model_comparison_df_report = filtered_df[filtered_df['search_group'] == selected_model_for_comparison].copy()
            
            if not model_comparison_df_report.empty:
                comparison_html_parts.append('<div class="report-section">')
                comparison_html_parts.append(f"<h2>üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {selected_model_for_comparison}</h2>")

                # Stats Table
                price_stats_report = calculate_price_statistics(model_comparison_df_report)
                if not price_stats_report.empty:
                    stats_table_html = price_stats_report.style.format({
                        'mean': "‚Ç¨{:,.0f}", 'median': "‚Ç¨{:,.0f}", 'std': "‚Ç¨{:,.0f}",
                        '25th_percentile': "‚Ç¨{:,.0f}", '75th_percentile': "‚Ç¨{:,.0f}"
                    }).to_html(index=True, justify='left', border=0, classes='deals_table', table_uuid='stats-table')
                    comparison_html_parts.append("<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω</h3>")
                    comparison_html_parts.append(stats_table_html)
                else:
                    comparison_html_parts.append("<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.</p>")

                # Median Difference Text
                if len(price_stats_report) > 1:
                    medians = price_stats_report['median'].to_dict()
                    sources = list(medians.keys())
                    if len(sources) == 2:
                        source1, source2 = sources[0], sources[1]
                        median1, median2 = medians[source1], medians[source2]
                        if median1 > 0 and median2 > 0:
                            percentage_diff = ((median2 - median1) / median1) * 100
                            diff_text = f"<strong>–†–∞–∑–Ω–∏—Ü–∞ –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω ({source2} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {source1}):</strong> {percentage_diff:,.2f}%"
                            if percentage_diff > 0:
                                diff_text += f'<br><span style="color: #ff7675;">–ù–∞ —Å–∞–π—Ç–µ {source2} –º–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ –Ω–∞ {percentage_diff:,.2f}%.</span>'
                            else:
                                diff_text += f'<br><span style="color: #55efc4;">–ù–∞ —Å–∞–π—Ç–µ {source2} –º–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∞ {abs(percentage_diff):,.2f}%.</span>'
                            comparison_html_parts.append(f'<p style="font-size: 1.1rem;">{diff_text}</p>')
                comparison_html_parts.append('</div>')

                # Box Plot
                comparison_html_parts.append('<div class="report-section">')
                fig_box_report = create_price_distribution_box_plot(model_comparison_df_report)
                box_plot_html = fig_box_report.to_html(include_plotlyjs=False)
                comparison_html_parts.append("<h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</h3>")
                comparison_html_parts.append(box_plot_html)
                comparison_html_parts.append('</div>')

                # Econometrics Plot
                comparison_html_parts.append('<div class="report-section">')
                comparison_html_parts.append("<h2>üî¨ –≠–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h2>")
                econometrics_fig_report = create_quantile_lowess_plot(model_comparison_df_report)
                # Export as a bare div (no <html>/<body>) and attach a local click handler
                econometrics_plot_html = econometrics_fig_report.to_html(include_plotlyjs=False, full_html=False)
                econometrics_click_js = (
                    "<script>"
                    "(function(){"
                    "var divs=document.getElementsByClassName('plotly-graph-div');"
                    "if(!divs||!divs.length) return;"
                    "var plot_div=divs[divs.length-1];"
                    "if(plot_div&&plot_div.on){"
                    "plot_div.on('plotly_click', function(data){"
                    " if(data.points&&data.points.length>0){"
                    "  var p=data.points[0];"
                    "  var url=(p.customdata && p.customdata[0]) || null;"
                    "  if(url){ window.open(url, '_blank'); }"
                    " }"
                    "});"
                    "}"
                    "})();"
                    "</script>"
                )
                comparison_html_parts.append(econometrics_plot_html + econometrics_click_js)

                # Hedonic Model Results for HTML
                hedonic_model_report = run_hedonic_model(model_comparison_df_report)
                if hedonic_model_report:
                    comparison_html_parts.append("<h3>–ì–µ–¥–æ–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏</h3>")
                    comparison_html_parts.append("<p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç '—á–∏—Å—Ç—É—é' —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–∞—Ö –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è –ø—Ä–æ–±–µ–≥ –∏ –≤–æ–∑—Ä–∞—Å—Ç.</p>")
                    if hasattr(hedonic_model_report, 'reference_market'):
                        comparison_html_parts.append(f"<p><em>–ë–∞–∑–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: <strong>{hedonic_model_report.reference_market}</strong></em></p>")

                    # Support both naming schemes: 'market_*' and 'C(market)[T.*]'
                    params = hedonic_model_report.params
                    market_coeffs_report = {k: v for k, v in params.items() if k.startswith('market_')}
                    if not market_coeffs_report:
                        market_coeffs_report = {k: v for k, v in params.items() if 'C(market' in k}

                    if market_coeffs_report:
                        for market, coeff in market_coeffs_report.items():
                            if market.startswith('market_'):
                                market_name = market.replace('market_', '')
                            else:
                                market_name = market.split('.')[-1].split(']')[0]
                            premium = (np.exp(coeff) - 1) * 100
                            comparison_html_parts.append(f"<p><strong>–ü—Ä–µ–º–∏—è —Ä—ã–Ω–∫–∞ {market_name}:</strong> {premium:.2f}%</p>")

                    # Build the same HTML table with tooltips as in the app
                    # Tooltips definitions (mirrors on-page)
                    tooltips = {
                        "R-squared": "–ß—Ç–æ —ç—Ç–æ: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –º–æ–¥–µ–ª—å. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ß–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ.",
                        "Adj. R-squared": "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π R-–∫–≤–∞–¥—Ä–∞—Ç: —É—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤; –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.",
                        "AIC": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –ê–∫–∞–∏–∫–µ: –º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ –ø—Ä–∏ –ø—Ä–æ—á–∏—Ö —Ä–∞–≤–Ω—ã—Ö.",
                        "BIC": "–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: –º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ.",
                        "coef": "–û—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–≤ –ª–æ–≥-—Ü–µ–Ω–µ).",
                        "std err": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞.",
                        "t": "t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞.",
                        "P>|t|": "p-–∑–Ω–∞—á–µ–Ω–∏–µ: < 0.05 ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ.",
                        "[0.025": "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ 95% –î–ò.",
                        "0.975]": "–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ 95% –î–ò.",
                        "market_": "–ë–∏–Ω–∞—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä—ã–Ω–∫–æ–≤; –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ‚Äî –ø—Ä–µ–º–∏—è/–¥–∏—Å–∫–æ–Ω—Ç –∫ –±–∞–∑–æ–≤–æ–º—É —Ä—ã–Ω–∫—É.",
                        "I(mileage_km ** 2)": "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–±–µ–≥–∞: —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ —Å —Ü–µ–Ω–æ–π."
                    }

                    def _get_tooltip(term: str) -> str:
                        term = term.strip().replace(":", "")
                        if term == "I(mileage_km ** 2)":
                            return html.escape(tooltips.get("I(mileage_km ** 2)", ""), quote=True)
                        if term in tooltips:
                            return html.escape(tooltips[term], quote=True)
                        if term.startswith("market_") or term.startswith("C(market"):
                            return html.escape(tooltips["market_"], quote=True)
                        if term.startswith("[0.025"):
                            return html.escape(tooltips["[0.025"], quote=True)
                        if term.endswith("0.975]"):
                            return html.escape(tooltips["0.975]"], quote=True)
                        return ""

                    summary = hedonic_model_report.summary()
                    # Table 1
                    html_output = "<h4>–¢–∞–±–ª–∏—Ü–∞ 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h4>"
                    table1_data = summary.tables[0].data
                    html_output += "<table class='statsmodels-table'>"
                    for row in table1_data:
                        html_output += "<tr>"
                        if len(row) >= 4:
                            html_output += f"<td class='header' title='{_get_tooltip(row[0])}'>{row[0]}</td><td>{row[1]}</td>"
                            html_output += f"<td class='header' title='{_get_tooltip(row[2])}'>{row[2]}</td><td>{row[3]}</td>"
                        html_output += "</tr>"
                    html_output += "</table><br>"

                    # Table 2
                    html_output += "<h4>–¢–∞–±–ª–∏—Ü–∞ 2: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏</h4>"
                    table2_data = summary.tables[1].data
                    html_output += "<table class='statsmodels-table'>"
                    html_output += "<thead><tr>"
                    for header_cell in table2_data[0]:
                        html_output += f"<th title='{_get_tooltip(header_cell)}'>{header_cell}</th>"
                    html_output += "</tr></thead>"
                    html_output += "<tbody>"
                    for row in table2_data[1:]:
                        html_output += "<tr>"
                        html_output += f"<td class='header' title='{_get_tooltip(row[0])}'>{row[0]}</td>"
                        for cell in row[1:]:
                            html_output += f"<td>{cell}</td>"
                        html_output += "</tr>"
                    html_output += "</tbody></table><br>"

                    # Table 3
                    html_output += "<h4>–¢–∞–±–ª–∏—Ü–∞ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã</h4>"
                    table3_data = summary.tables[2].data
                    html_output += "<table class='statsmodels-table'>"
                    for row in table3_data:
                        html_output += "<tr>"
                        if len(row) >= 4:
                            html_output += f"<td class='header' title='{_get_tooltip(row[0])}'>{row[0]}</td><td>{row[1]}</td>"
                            html_output += f"<td class='header' title='{_get_tooltip(row[2])}'>{row[2]}</td><td>{row[3]}</td>"
                        html_output += "</tr>"
                    html_output += "</table>"

                    statsmodels_css = """
                    <style>
                        .statsmodels-summary table.statsmodels-table {
                            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;
                            border-collapse: collapse;
                            width: 100%;
                            color: #FAFAFA;
                            background-color: #0E1117;
                        }
                        .statsmodels-summary th, .statsmodels-summary td {
                            text-align: right;
                            border: 1px solid #262730;
                            padding: 8px;
                            font-size: 0.9rem;
                        }
                        .statsmodels-summary .header, .statsmodels-summary th {
                            text-align: left;
                            font-weight: bold;
                        }
                        .statsmodels-summary h4 {
                            margin-top: 20px;
                            margin-bottom: 10px;
                            font-weight: bold;
                            color: #FAFAFA;
                        }
                        .statsmodels-summary td[title]:hover {
                            cursor: help;
                            background-color: #262730;
                        }
                    </style>
                    """

                    # Header like in the app
                    comparison_html_parts.append("<h4>–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏:</h4>")
                    comparison_html_parts.append(statsmodels_css + f"<div class='statsmodels-summary'>{html_output}</div>")
                else:
                    comparison_html_parts.append("<h3>–ì–µ–¥–æ–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏</h3>")
                    comparison_html_parts.append("<p>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–µ.</p>")

                    # Explanations (as on page) ‚Äî added to exported report
                    explanations_html = """
                    <div class='report-section'>
                      <h3>–ö–∞–∫ —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫? (–¢—Ä–µ–Ω–¥—ã –∏ –∫–æ—Ä–∏–¥–æ—Ä—ã)</h3>
                      <p>–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ª–æ—è–º–∏.</p>
                      <ul>
                        <li><strong>–¶–≤–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏</strong>: –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä—ã–Ω–∫–æ–≤.</li>
                        <li><strong>–¶–≤–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ (–¢—Ä–µ–Ω–¥—ã)</strong>: –°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—ã–Ω–∫–∞.</li>
                        <li><strong>–ü—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã</strong>: 25‚Äì75% ‚Äî ¬´—è–¥—Ä–æ¬ª —Ä—ã–Ω–∫–∞; 10‚Äì90% ‚Äî –∫—Ä–∞–π–Ω–∏–µ —É—Ä–æ–≤–Ω–∏.</li>
                      </ul>
                      <p><strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</strong>: –µ—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∏–∂–µ –ª–∏–Ω–∏–∏ 10%, —ç—Ç–æ –æ—á–µ–Ω—å –¥–µ—à–µ–≤–∞—è —Å–¥–µ–ª–∫–∞; –≤–Ω—É—Ç—Ä–∏ 25‚Äì75% ‚Äî —Ü–µ–Ω–∞ ¬´–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è¬ª.</p>
                    </div>
                    <div class='report-section'>
                      <h3>–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (R-squared –∏ –¥—Ä.)</h3>
                      <ul>
                        <li><strong>R-squared</strong>: –î–æ–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ü–µ–Ω—ã, –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å—é. –ë–ª–∏–∂–µ –∫ 1 ‚Äî –ª—É—á—à–µ.</li>
                        <li><strong>No. Observations</strong>: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ –≤ –≤—ã–±–æ—Ä–∫–µ ‚Äî –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ.</li>
                        <li><strong>Prob (F-statistic)</strong>: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ 0, –º–æ–¥–µ–ª—å –≤ —Ü–µ–ª–æ–º –∑–Ω–∞—á–∏–º–∞.</li>
                      </ul>
                      <p><strong>–í—ã–≤–æ–¥</strong>: –≤—ã—Å–æ–∫–∏–µ R-squared –∏ –∑–Ω–∞—á–∏–º—ã–π F-—Ç–µ—Å—Ç –ø–æ–≤—ã—à–∞—é—Ç –¥–æ–≤–µ—Ä–∏–µ –∫ –≤—ã–≤–æ–¥–∞–º.</p>
                    </div>
                    <div class='report-section'>
                      <h3>–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)</h3>
                      <ul>
                        <li><strong>coef</strong>: –ó–Ω–∞–∫ –∏ —Å–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ª–æ–≥-—Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑—Ä–∞—Å—Ç ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ).</li>
                        <li><strong>market_‚Ä¶</strong>: –ü—Ä–µ–º–∏—è/–¥–∏—Å–∫–æ–Ω—Ç —Ä—ã–Ω–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ.</li>
                        <li><strong>P>|t|</strong>: &lt; 0.05 ‚Äî –≤–ª–∏—è–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ.</li>
                      </ul>
                    </div>
                    <div class='report-section'>
                      <h3>–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
                      <ul>
                        <li><strong>Durbin‚ÄìWatson</strong>: –û–∫–æ–ª–æ 2 ‚Äî –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤.</li>
                      </ul>
                    </div>
                    """
                    comparison_html_parts.append(explanations_html)

                comparison_html_parts.append('</div>')

        final_comparison_html = "\n".join(comparison_html_parts)

        # --- Assemble Final HTML ---
        title_str = f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {', '.join(sorted(filtered_df['comparison_group'].unique()))}"
        
        css_style = """
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; background-color: #111; color: #eee; margin: 2rem; }
            h1, h2, h3 { color: #eee; border-bottom: 1px solid #444; padding-bottom: 10px; font-weight: 400; }
            h1 { font-size: 2.2rem; }
            h2 { font-size: 1.75rem; margin-top: 3rem; }
            h3 { font-size: 1.4rem; margin-top: 2rem; border-bottom: none; }
            .report-section { margin-bottom: 2rem; padding: 1rem; background-color: #1e1e1e; border-radius: 8px; }
            .deals_table { width: 100%; border-collapse: collapse; margin-bottom: 1rem; }
            .deals_table th, .deals_table td { padding: 8px 12px; text-align: left; border-bottom: 1px solid #333; }
            .deals_table th { background-color: #222; cursor: pointer; }
            .deals_table tr:hover { background-color: #2a2a2a; }
            .deals_table th.sort-up::after { content: \" ‚ñ≤\"; }
            .deals_table th.sort-down::after { content: \" ‚ñº\"; }
            a { color: #3498db; text-decoration: none; }
            a:hover { text-decoration: underline; }
            p { margin: 1rem 0; line-height: 1.6; }
            #T_stats-table { width: 100%; }
            #T_stats-table th, #T_stats-table td { text-align: center; }
        </style>
        """""

        report_html = f"""
        <html>
            <head>
                <meta charset="UTF-8">
                <title>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</title>
                <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/vanilla-js-tablesort@0.1.0/dist/vanilla-js-tablesort.min.js"></script>
                {css_style}
            </head>
            <body>
                <h1>{title_str}</h1>
                <div class="report-section">{graph_html}</div>
                {listings_summary_html}
                <div class="report-section">
                    <h2>–¢–æ–ø-2 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–±–µ–≥–∞</h2>
                    {table_html}
                </div>
                {final_comparison_html}
                <script>
                    new Tablesort(document.getElementById('deals-table'));
                </script>
            </body>
        </html>
        """
        
        filename = f"analysis_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.html"
        filepath = os.path.join("results", filename)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(report_html)
        
        abs_path = os.path.abspath(filepath)
        st.sidebar.success(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{abs_path}`")
    else:
        st.sidebar.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
