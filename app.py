import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import os
from datetime import datetime

# --- Page Configuration ---
st.set_page_config(
    page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ",
    page_icon="üìä",
    layout="wide"
)

# --- Data Loading ---
@st.cache_data
def load_all_data():
    """Loads data from all available sources and combines them."""
    data_sources = {
        "polovni_automobili": "data/raw/polovni_automobili.csv",
        "mobile.de": "data/raw/mobile_de.csv"
    }
    
    all_dfs = []
    for source_name, path in data_sources.items():
        if os.path.exists(path):
            df = pd.read_csv(path)
            # Ensure source column exists for backward compatibility
            if 'source' not in df.columns:
                df['source'] = source_name
            all_dfs.append(df)
        else:
            st.warning(f"–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

    if not all_dfs:
        return None

    combined_df = pd.concat(all_dfs, ignore_index=True)
    combined_df = combined_df.dropna(subset=["price_eur", "mileage_km", "year", "title"]).copy()
    for col, dtype in {"price_eur": int, "mileage_km": int, "year": int}.items():
        combined_df[col] = combined_df[col].astype(dtype)
    
    if 'search_group' not in combined_df.columns:
        combined_df['search_group'] = 'Default'

    # Create a new unique group for comparison, e.g., "Volvo XC60 (mobile.de)"
    combined_df['comparison_group'] = combined_df['search_group'] + " (" + combined_df['source'] + ")"
    
    return combined_df

# --- Helper Functions ---
def get_top_deals(df):
    if df.empty:
        return pd.DataFrame()
    max_km_limit = int(df['mileage_km'].max() + 50000)
    bins = list(range(0, max_km_limit, 50000))
    if not bins:
        return pd.DataFrame()
    labels = [f'{i/1000:,.0f} - {(i+50000)/1000:,.0f} —Ç—ã—Å. –∫–º' for i in bins[:-1]]
    df['mileage_bin'] = pd.cut(df['mileage_km'], bins=bins, labels=labels, right=False)
    
    # Group by the new comparison group
    top_deals = df.groupby(['mileage_bin', 'comparison_group'], observed=False).apply(
        lambda x: x.nsmallest(2, 'price_eur')
    ).reset_index(drop=True)
    return top_deals

# --- Main App ---
df = load_all_data()

if df is None:
    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–∞–ø–∫–µ `data/raw/`.")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: `python3 src/scrape_polovni_botasaurus.py`")
    st.stop()

# --- Sidebar --- 
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# New filter for data source
all_sources = sorted(df['source'].unique())
selected_sources = st.sidebar.multiselect("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", all_sources, default=all_sources)

all_groups = sorted(df['search_group'].unique())
selected_groups = st.sidebar.multiselect("–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", all_groups, default=all_groups)

min_year, max_year = int(df['year'].min()), int(df['year'].max())
selected_year_range = st.sidebar.slider("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", min_year, max_year, (min_year, max_year))

min_km, max_km = int(df['mileage_km'].min()), int(df['mileage_km'].max())
selected_km_range = st.sidebar.slider("–ü—Ä–æ–±–µ–≥, –∫–º", min_km, max_km, (min_km, max_km))

# --- Filtering ---
filtered_df = df[
    (df['source'].isin(selected_sources)) &
    (df['search_group'].isin(selected_groups)) &
    (df['year'].between(selected_year_range[0], selected_year_range[1])) &
    (df['mileage_km'].between(selected_km_range[0], selected_km_range[1]))
].copy()

# --- Calculations ---
fig = go.Figure()
if not filtered_df.empty:
    # Use the new comparison_group for coloring
    unique_comparison_groups = sorted(filtered_df['comparison_group'].unique())
    color_map = {group: color for group, color in zip(unique_comparison_groups, px.colors.qualitative.Plotly)}
    
    for name, group_df in filtered_df.groupby('comparison_group'):
        if len(group_df) < 3: continue
        group_color = color_map.get(name, 'grey')
        fig.add_trace(go.Scatter(
            x=group_df['mileage_km'], y=group_df['price_eur'], mode='markers', name=name,
            marker=dict(color=group_color), customdata=group_df['url'], text=group_df['title'],
            hovertemplate="<b>%{text}</b><br>–¶–µ–Ω–∞: %{y:,.0f} ‚Ç¨<br>–ü—Ä–æ–±–µ–≥: %{x:,.0f} km<br><i>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞</i><extra></extra>"
        ))
        X = np.c_[np.ones(len(group_df)), group_df["mileage_km"]/1000.0, group_df["year"]]
        y = group_df["price_eur"].values
        try:
            beta = np.linalg.pinv(X.T @ X) @ (X.T @ y)
            mid_year = int(group_df["year"].median())
            km_grid = np.linspace(group_df["mileage_km"].min(), group_df["mileage_km"].max(), 100)
            trend = beta[0] + beta[1]*(km_grid/1000.0) + beta[2]*mid_year
            fig.add_trace(go.Scatter(x=km_grid, y=trend, mode='lines', name=f'–¢—Ä–µ–Ω–¥ –¥–ª—è {name}', line=dict(color=group_color, dash='dash'), hoverinfo='skip'))
        except np.linalg.LinAlgError:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã '{name}'.")

fig.update_layout(xaxis_title="–ü—Ä–æ–±–µ–≥, –∫–º", yaxis_title="–¶–µ–Ω–∞, ‚Ç¨", legend_title="–ì—Ä—É–ø–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", template="plotly_dark", height=650)
top_deals_df = get_top_deals(filtered_df)

# --- Sidebar Export Button ---
st.sidebar.divider()
st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç")
if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ HTML"):
    if not filtered_df.empty:
        graph_html = fig.to_html(include_plotlyjs='cdn')
        js_code = '<script>var plot_div = document.getElementsByClassName("plotly-graph-div")[0]; plot_div.on("plotly_click", function(data){if(data.points.length > 0){var point = data.points[0]; var url = point.customdata; if(url){window.open(url, "_blank");}}});</script>'
        graph_html = graph_html.replace('</body>', js_code + '</body>')

        deals_for_html = top_deals_df.copy()
        deals_for_html.index = np.arange(1, len(deals_for_html) + 1)
        deals_for_html.index.name = "‚Ññ"
        deals_for_html['url'] = deals_for_html['url'].apply(lambda x: f'<a href="{x}" target="_blank">–ü–µ—Ä–µ–π—Ç–∏</a>')
        table_html = deals_for_html.to_html(index=True, justify='left', border=0, classes='deals_table', escape=False, table_id="deals-table")

        title_str = f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {', '.join(sorted(filtered_df['comparison_group'].unique()))}"

        report_html = f"""
        <html>
            <head>
                <meta charset="UTF-8">
                <title>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</title>
                <script src="https://cdn.jsdelivr.net/npm/vanilla-js-tablesort@0.1.0/dist/vanilla-js-tablesort.min.js"></script>
                <style>
                    body {{ font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: #111; color: #eee; margin: 2rem; }}
                    h1, h2 {{ color: #eee; border-bottom: 1px solid #444; padding-bottom: 10px; font-weight: 400; }}
                    h1 {{ font-size: 2.2rem; }}
                    h2 {{ font-size: 1.75rem; }}
                    .deals_table {{ width: 100%; border-collapse: collapse; }}
                    .deals_table th, .deals_table td {{ padding: 8px 12px; text-align: left; border-bottom: 1px solid #333; }}
                    .deals_table th {{ background-color: #222; cursor: pointer; }}
                    .deals_table tr:hover {{ background-color: #2a2a2a; }}
                    .deals_table th.sort-up::after {{ content: " ‚ñ≤"; }}
                    .deals_table th.sort-down::after {{ content: " ‚ñº"; }}
                    a {{ color: #3498db; text-decoration: none; }}
                    a:hover {{ text-decoration: underline; }}
                </style>
            </head>
            <body>
                <h1>{title_str}</h1>
                {graph_html}
                <h2>–¢–æ–ø-2 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–±–µ–≥–∞</h2>
                {table_html}
                <script>
                    new Tablesort(document.getElementById('deals-table'));
                </script>
            </body>
        </html>
        """
        
        filename = f"analysis_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.html"
        filepath = os.path.join("results", filename)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(report_html)
        
        abs_path = os.path.abspath(filepath)
        st.sidebar.success(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{abs_path}`")
    else:
        st.sidebar.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

# --- Render Main Page ---
st.title("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
st.write(f"–ù–∞–π–¥–µ–Ω–æ **{len(filtered_df)}** –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

if filtered_df.empty:
    st.warning("–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
else:
    st.header("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–≥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
    # Inject JS for clickable points
    js_code = '<script>var plot_div = document.getElementsByClassName("plotly-graph-div")[0]; plot_div.on("plotly_click", function(data){if(data.points.length > 0){var point = data.points[0]; var url = point.customdata; if(url){window.open(url, "_blank");}}});</script>'
    graph_html = fig.to_html(include_plotlyjs='cdn')
    graph_html = graph_html.replace('</body>', js_code + '</body>')
    st.components.v1.html(graph_html, height=700, scrolling=True)

    st.header("‚≠ê –¢–æ–ø-2 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–æ–±–µ–≥–∞")
    st.write("–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω –≤ –∫–∞–∂–¥–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—Ä–æ–±–µ–≥–∞.")
    st.dataframe(top_deals_df, use_container_width=True, height=1150, column_config={
        "url": st.column_config.LinkColumn("–°—Å—ã–ª–∫–∞", display_text="–ü–µ—Ä–µ–π—Ç–∏ ‚Üó"),
        "comparison_group": st.column_config.Column("–ì—Ä—É–ø–ø–∞"),
        "mileage_bin": st.column_config.Column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–µ–≥–∞"),
        "source": st.column_config.Column("–ò—Å—Ç–æ—á–Ω–∏–∫")
    })
